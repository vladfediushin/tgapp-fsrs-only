"""Add FSRS fields to UserProgress model

Revision ID: ffa6f5dd890b
Revises: 176e1d11c3fc
Create Date: 2025-07-17 23:41:51.758074

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'ffa6f5dd890b'
down_revision: Union[str, None] = '176e1d11c3fc'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('answer_history', 'answered_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               nullable=True,
               existing_server_default=sa.text('now()'))
    op.drop_index('answer_history_question_id_idx', table_name='answer_history')
    op.drop_constraint('answer_history_question_id_fkey', 'answer_history', type_='foreignkey')
    op.drop_constraint('fk_answer_history_user_id', 'answer_history', type_='foreignkey')
    op.add_column('user_progress', sa.Column('stability', sa.Float(), nullable=True))
    op.add_column('user_progress', sa.Column('difficulty', sa.Float(), nullable=True))
    op.add_column('user_progress', sa.Column('retrievability', sa.Float(), nullable=True))
    op.add_column('user_progress', sa.Column('elapsed_days', sa.Integer(), nullable=True))
    op.add_column('user_progress', sa.Column('scheduled_days', sa.Integer(), nullable=True))
    op.add_column('user_progress', sa.Column('reps', sa.Integer(), nullable=True))
    op.add_column('user_progress', sa.Column('lapses', sa.Integer(), nullable=True))
    op.add_column('user_progress', sa.Column('state', sa.Integer(), nullable=True))
    op.add_column('user_progress', sa.Column('last_review', sa.DateTime(timezone=True), nullable=True))
    op.add_column('user_progress', sa.Column('due', sa.DateTime(timezone=True), nullable=True))
    op.alter_column('users', 'exam_country',
               existing_type=sa.CHAR(length=2),
               type_=sa.Text(),
               existing_nullable=True)
    op.alter_column('users', 'exam_language',
               existing_type=sa.CHAR(length=2),
               type_=sa.Text(),
               existing_nullable=True)
    op.alter_column('users', 'ui_language',
               existing_type=sa.CHAR(length=2),
               type_=sa.Text(),
               existing_nullable=True)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('users', 'ui_language',
               existing_type=sa.Text(),
               type_=sa.CHAR(length=2),
               existing_nullable=True)
    op.alter_column('users', 'exam_language',
               existing_type=sa.Text(),
               type_=sa.CHAR(length=2),
               existing_nullable=True)
    op.alter_column('users', 'exam_country',
               existing_type=sa.Text(),
               type_=sa.CHAR(length=2),
               existing_nullable=True)
    op.drop_column('user_progress', 'due')
    op.drop_column('user_progress', 'last_review')
    op.drop_column('user_progress', 'state')
    op.drop_column('user_progress', 'lapses')
    op.drop_column('user_progress', 'reps')
    op.drop_column('user_progress', 'scheduled_days')
    op.drop_column('user_progress', 'elapsed_days')
    op.drop_column('user_progress', 'retrievability')
    op.drop_column('user_progress', 'difficulty')
    op.drop_column('user_progress', 'stability')
    op.create_foreign_key('fk_answer_history_user_id', 'answer_history', 'users', ['user_id'], ['id'], ondelete='CASCADE')
    op.create_foreign_key('answer_history_question_id_fkey', 'answer_history', 'questions', ['question_id'], ['id'])
    op.create_index('answer_history_question_id_idx', 'answer_history', ['question_id'], unique=False)
    op.alter_column('answer_history', 'answered_at',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('now()'))
    # ### end Alembic commands ###
