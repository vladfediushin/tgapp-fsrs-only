#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã FSRS-only –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –ª–æ–≥–∏–∫–∏ Fibonacci
"""
import asyncio
import sys
import os
from pathlib import Path
import pytest

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ app
sys.path.append(str(Path(__file__).parent / "app"))

@pytest.mark.asyncio
async def test_fsrs_system():
    """–¢–µ—Å—Ç FSRS —Å–∏—Å—Ç–µ–º—ã"""
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª–∏ –ø–æ –æ—Ç–¥–µ–ª—å–Ω–æ—Å—Ç–∏
        import app.crud.user_progress as crud_progress
        from app.models import UserProgress
        
        print("‚úÖ –í—Å–µ –º–æ–¥—É–ª–∏ —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–æ–¥–µ–ª—å UserProgress —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ FSRS –ø–æ–ª—è
        progress_fields = [attr for attr in dir(UserProgress) if not attr.startswith('_') and not callable(getattr(UserProgress, attr))]
        print(f"üîç –ü–æ–ª—è –º–æ–¥–µ–ª–∏ UserProgress: {progress_fields}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ FSRS –ø–æ–ª–µ–π
        required_fsrs_fields = ['stability', 'difficulty', 'retrievability', 'state', 'reps', 'lapses', 'due']
        missing_fields = [field for field in required_fsrs_fields if not hasattr(UserProgress, field)]
        if missing_fields:
            print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç FSRS –ø–æ–ª—è: {missing_fields}")
            return False
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Å—Ç–∞—Ä—ã—Ö –ø–æ–ª–µ–π
        old_fields = ['repetition_count', 'next_due_at']
        present_old_fields = [field for field in old_fields if hasattr(UserProgress, field)]
        if present_old_fields:
            print(f"‚ùå –û—Å—Ç–∞–ª–∏—Å—å —Å—Ç–∞—Ä—ã–µ –ø–æ–ª—è: {present_old_fields}")
            return False
            
        print("‚úÖ –ú–æ–¥–µ–ª—å UserProgress —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ FSRS –ø–æ–ª—è")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ CRUD
        crud_functions = [
            'create_or_update_progress',
            'create_or_update_progress_batch',
            'get_progress_for_user',
            'get_user_progress_for_question',
            'get_due_questions'
        ]
        
        for func_name in crud_functions:
            if not hasattr(crud_progress, func_name):
                print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏—è: {func_name}")
                return False
                
        print("‚úÖ –í—Å–µ CRUD —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Å—Ç–∞—Ä—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
        old_functions = [
            'create_or_update_progress_fsrs', 
            'create_or_update_progress_batch_fsrs',
            'calculate_next_due_date',
            'FIB_SEQUENCE'
        ]
        
        for func_name in old_functions:
            if hasattr(crud_progress, func_name):
                print(f"‚ùå –û—Å—Ç–∞–ª—Å—è —Å—Ç–∞—Ä—ã–π —ç–ª–µ–º–µ–Ω—Ç: {func_name}")
                return False
                
        print("‚úÖ –°—Ç–∞—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ Fibonacci —É–¥–∞–ª–µ–Ω—ã")
        
        print("\nüéâ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã! –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å FSRS")
        return True
        
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        return False
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        return False

if __name__ == "__main__":
    success = asyncio.run(test_fsrs_system())
    if success:
        print("\n‚úÖ –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù: –°–∏—Å—Ç–µ–º–∞ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–∞ –Ω–∞ FSRS-only")
    else:
        print("\n‚ùå –¢–ï–°–¢ –ù–ï –ü–†–û–ô–î–ï–ù: –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã")
        sys.exit(1)
